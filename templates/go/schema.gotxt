// auto generate by generator
package openapi

import (
	{{if ne .ModelType "object"}}"fmt"{{end}}
	
	validation "github.com/go-ozzo/ozzo-validation/v4"
)


type {{ .ModelName}} {{if eq .ModelType "object"}}struct{
	{{ range .FieldList}}{{.FieldName}} {{if eq .FieldType  "array"}}[]{{.ChildItemType}}{{else}}{{.FieldType}}{{end}} `json:"{{.ApiFieldName}}"` //{{.Description}}
	{{end}}
}{{else if eq .ModelFormat "binary"}}[]byte {{else}}{{.ModelType}}{{end}}

type {{.InterfaceName}} interface{
	{{ range .FieldList}}
	Get{{.FieldName}}() {{if eq .FieldType  "array"}}[]{{.ChildItemType}}{{else}}{{.FieldType}}{{end}}
	Set{{.FieldName}}({{if eq .FieldType  "array"}}[]{{.ChildItemType}}{{else}}{{.FieldType}}{{end}}){{end}}
	Validate() error
	GetExamples() {{.ModelName}}
	{{if ne .ModelType "object"}}ToString() {{.ModelType}}{{end}}
	
}
{{ range .FieldList}}
func (obj {{.ModelName}}) Get{{.FieldName}}() {{if eq .FieldType  "array"}}[]{{.ChildItemType}}{{else}}{{.FieldType}}{{end}}{
	return obj.{{.FieldName}}
}
func (obj *{{.ModelName}}) Set{{.FieldName}}(val {{if eq .FieldType  "array"}}[]{{.ChildItemType}}{{else}}{{.FieldType}}{{end}}){
	obj.{{.FieldName}}= val
}{{end}}

func (obj {{.ModelName}}) Validate() error {
	return validation.Errors{
		//"name": validation.Validate(m.Name, validation.Required, validation.Length(5, 20)),
		//"email": validation.Validate(m.Name, validation.Required, is.Email),
		//"zip": validation.Validate(m.Address.Zip, validation.Required, validation.Match(regexp.MustCompile("^[0-9]{5}$"))),
	}.Filter()
}

func (obj {{.ModelName}}) GetExamples() {{.ModelName}} {
	{{if eq .ModelType "object"}}    example:= {{.ModelName}}{
		{{ with .FieldList}} {{range .}}
		{{.FieldName}}: {{if eq .FieldIsModel true}} {{.FieldType}}{}.GetExamples(){{else}}{{.Example}}{{end}} ,{{end}}{{end}}
	}
	{{else}}    var  example {{.ModelName}} {{end}}
	return example
}


{{if ne .ModelType "object"}}
func (obj {{.ModelName}}) ToString() string{
	var value {{.ModelType}} = fmt.Sprintf("%v", obj)
	
	return value
}
{{end}}