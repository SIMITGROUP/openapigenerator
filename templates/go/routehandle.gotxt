// auto generate by generator
package openapi

import (
   "github.com/gin-gonic/gin"
//    "net/http"   
)
{{range .}}
// {{ .Summary }}	
// {{ .Description }}	
func {{ .HandleName}}(c *gin.Context) {    
    {{$paracount := len .Parameters}}
    {{if gt $paracount 0}}// parameters{{range $parayeky,$para:= .Parameters}} 
    {{if eq $para.StoreIn "path"}}{{$parayeky}} := c.Param("{{$parayeky}}"){{else if eq $para.StoreIn "query"}}{{$parayeky}} := c.Query("{{$parayeky}}"){{else if eq $para.StoreIn "header"}}{{$parayeky}} := c.Request.Header["{{$parayeky}}"]{{end}}{{end}}
    {{range $parayeky,$para:= .Parameters}}_, {{end}}_ = {{range $parakey,$para := .Parameters}}{{ $parakey }}, {{end}}1
    {{end}}
    {{if ne .RequestBodies.RequestSchema.ModelName  ""}}//request bodies
    requestbodies := {{ .RequestBodies.RequestSchema.ModelName}}{}
    _ = c.ShouldBindJSON(&requestbodies){{end}}
    {{ range $hindex,$header:=.Headers}}c.Header("{{$header.Name}}", "{{$header.Example}}")
    {{end}}
    c.Header("Content-Type", "{{.ContentType}}")
    {{if eq .ResponseSchema.ModelType "object"}}
    data:={{.ResponseSchema.ModelName}}{}.GetExamples()
    c.JSON({{.HttpStatusCode}}, data)
    {{else if eq .ResponseSchema.ModelFormat "binary"}}data := []byte{}
    c.Status({{.HttpStatusCode}})
    c.Writer.Write(data)
    {{else}}var data {{.ResponseSchema.ModelName}}
    c.String({{.HttpStatusCode}}, data.GetExamples().ToString()){{end}}
}{{end}}
