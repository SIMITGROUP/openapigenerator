// auto generate by generator
package test
import (	
	"testing"
)

func Test{{.FuncName}}(t *testing.T) {
	{{.FuncName}}(t)

	
}

// copy and modify below content and put into new file {{.FuncName}}.go (in this test folder)
/*
package test
import (
	"io"
	"net/http"
	"os"
	"testing"
	"strings"

	"github.com/bmizerany/assert"
	"github.com/joho/godotenv"
)

func {{.FuncName}}(t *testing.T)  {
	_ = godotenv.Load()
	{{range $envname,$envval:= .Envvars}}{{$envname}}:=os.Getenv("{{$envname}}")
	{{end}}
	{{range $envname,$envval:= .Envvars}}_,{{end}}_ = {{range $envname,$envval:= .Envvars}}{{$envname}},{{end}} 1
	maxstring := 50
	client := &http.Client{}
	for _,requestdata := range {{.FuncName}}_RequestBody(){

		requestURL := fmt.Sprintf("%v%v", "{{.RequestServer}}","{{.RequestPath}}")
		var req *http.Request
		var err error
		if requestdata == nil {
			req, err = http.NewRequest("{{.RequestMethod}}", requestURL, nil)
		} else {
			req, err = http.NewRequest("{{.RequestMethod}}", requestURL, requestdata)
		}

		// req.Header.Add("X-Api-Key", X_Api_Key)

		if err != nil {
			t.Error(err)
		} else {
			req.Header.Set("Accept", "{{.ContentType}}")					
		}


		resp, err := client.Do(req)

		if err != nil {
			t.Error(err)		
		} else {
			b, err := io.ReadAll(resp.Body)
			responsebody := string(b)
			if len(responsebody) > maxstring {
				responsebody = responsebody[:maxstring] + "..." // trim too long body
			}
			if resp.StatusCode != {{.StatusCode}} {
				t.Error(responsebody)
			}
			if err != nil {
				t.Error("ERR2", err)
			}
			assert.Equal(t, resp.StatusCode, {{.StatusCode}})
			
		}
	}
}

func {{.FuncName}}_RequestBody()[]*strings.Reader{
	result := []*strings.Reader{}
	{{ if eq .WithRequestBody true}}
	data := {{.Examplestr}}
	result = append(result,strings.NewReader(data))
	{{else}}
	result = append(result,nil)
	{{end}}
	
	
	return result
}

*/

