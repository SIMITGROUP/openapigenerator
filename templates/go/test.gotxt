// auto generate by generator
package test
import (
	"fmt"
	"testing"
	"net/http"	
)

func Test{{.FuncName}}(t *testing.T) {
	requestURL := fmt.Sprintf("%v%v", "{{.RequestServer}}","{{.RequestPath}}")
	req, err := http.NewRequest("{{.RequestMethod}}", requestURL, {{if eq .WithRequestBody true}}{{.FuncName}}_RequestBody(){{else}}nil{{end}})
	if err != nil {
		t.Error(err)
	} else {
		req.Header.Set("Accept", "{{.ContentType}}")	
		{{.FuncName}}(t,req)
		
	}
}

// copy and modify below content and put into new file {{.FuncName}}.go (in this test folder)
/*
package test
import (
	"io"
	"net/http"
	"os"
	"testing"

	"github.com/bmizerany/assert"
	"github.com/joho/godotenv"
)

func {{.FuncName}}(t *testing.T, req *http.Request)  {
	_ = godotenv.Load()
	{{range $envname,$envval:= .Envvars}}{{$envname}}:=os.Getenv("{{$envname}}")
	{{end}}
	{{range $envname,$envval:= .Envvars}}_,{{end}}_ = {{range $envname,$envval:= .Envvars}}{{$envname}},{{end}} 1
	maxstring := 50
	client := &http.Client{}
	resp, err := client.Do(req)

	if err != nil {
		t.Error(err)		
	} else {
		b, err := io.ReadAll(resp.Body)
		responsebody := string(b)
		if len(responsebody) > maxstring {
			responsebody = responsebody[:maxstring] + "..." // trim too long body
		}
		if resp.StatusCode != {{.StatusCode}} {
			t.Error(responsebody)
		}
		if err != nil {
			t.Error("ERR2", err)
		}
		assert.Equal(t, resp.StatusCode, {{.StatusCode}})
		
	}

}

{{if eq .WithRequestBody true}}
func {{.FuncName}}_RequestBody()*strings.Reader{
	data := {{.Examplestr}}
	return strings.NewReader(data)
}
{{end}}
*/

