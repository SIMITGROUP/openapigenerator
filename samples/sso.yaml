openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'SIMIT User API'
  description: It is microservices connect to core system, provide authentication service at SSO, access database profiles, and provide others useful user information
servers:
  - url: http://localhost:9000
    description: development server
paths:
  /:
    get:
      summary: info api
      description: inform name and what version of this api
      operationId: GetAPIVersion
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  # oauth2 login flows
  /user/login:
    get:
      summary: redirect to Login Url
      description: use build in Oauth2_login
      operationId: -Oauth2_login
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PlainText' 
  /user/logout:
    get:
      summary: logout, 
      description: use build in Oauth2_logout and redirect to login page, responses below ignored
      operationId:  -Oauth2_logout
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PlainText'  
  /user/sso-callback:
    get:
      summary: api to sso server
      description: connect to keycloak server for request or refresh tokens. pass through middleway set access token and refresh token to user
      operationId: -Oauth2_callback
      responses:
        '200':
          description: success, will assign tokens to browser and return to app, responses below ignored
          content:            
            text/plain:
              schema:
                $ref: '#/components/schemas/PlainText'    
  /user/refresh-token:
      get:
        summary: api to sso server
        description: connect to keycloak server for request or refresh tokens. pass through middleway set access token and refresh token to user
        operationId: -Oauth2_refreshtoken
        responses:
          '200':
            description: success, will assign tokens to browser, responses below ignored
            content:            
              text/plain:
                schema:
                  $ref: '#/components/schemas/PlainText'
  # protected resources, access own profile only
  /user/profile:
    get:
      summary: get user infomation
      description: return user profile in json
      parameters:
        - $ref: '#/components/parameters/Uid'
      operationId: GetUserInfo
      security:
       - Oauth2: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  #   post:
  #   update:
  # /user/admin:
  #   put:
  # /user/admin/{uid}:
  #   get:
  #   post:
  #   delete:

components:
  parameters:
    Uid:
      name: uid
      description: user id in uuid format
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: xxxxx-xx-xxxx-xx
  schemas:
    PlainText:
      type: string
      example: plaintext            
    Message:
      type: object
      properties:
        status:
          type: string
          example: "OK"
        msg:
          type: string
          example: Welcome User API
        version:
          type: string
          example: 1.0.0
    User:
      type: object
      properties:
        username:
          type: string
          example: "user1"
        email:
          type: string
          format: email
          example: user1@example.com
        fullname:
          type: string
          example: User 1's Full Name
  securitySchemes:    
    Oauth2:
      description: Use keycloak server
      type: oauth2      
      # below information unused at the moment, all others info fetch from environment parameter
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            email : email
            openid: openid acc
            profile: profile
