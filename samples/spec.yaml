openapi: 3.0.3
info:
  title: User Accounts Manager Example
  description: |-
    This is a simple REST API example on managing user accounts.
  version: 00.01.00
servers:
  - url: http://localhost:8080/
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    get:
      tags:
        - user
      summary: Get list of users
      description: ''
      operationId: getUsersList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'          
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied

  /user/{username}:
    get:
      tags:
        - user
      summary: Get user details
      description: ''
      operationId: getUserDetails
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user details
      description: This can only be done by the logged in user.
      operationId: updateUserDetails
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          

        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'          
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 10
        username:
          type: string
          example: username
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Lenon
        password:
          type: string
          writeOnly: true
          example: password
        age:
          type: integer
          example: 30
      required:
      - username
      - password     
    UserList:
      type: object
      properties:
        number_of_users:
          type: integer
          readOnly: true
          example: 4
        list_of_users:
          type: array
          items:
            type: string
          example: 
          - 'John'
          - 'Paul'
          - 'George'
          - 'Ringo'