# Copyright 2021 ForgeRock AS. All Rights Reserved
#
# Use of this code requires a commercial software license with ForgeRock AS.
# or with one of its affiliates. All use shall be exclusively subject
# to such license between the licensee and ForgeRock AS.
openapi: 3.0.3
info:
  title: Security schemes demo
  description: |
    OpenAPI 3 supports security schemes that you can link to the APIs
    that require particular schemes. This looks useful for Identity Cloud
    where different APIs require different schemes (monitoring and logs
    depend on API keys or HTTP Basic, IDM uses AM OAuth 2.0,
    and AM uses cookie-based keys).


    For OAuth 2.0, this way of describing the schemes is important, because
    OpenAPI 3 does not allow reuse of paths for different APIs, so it
    does not provide an appropriate means of describing endpoints like
    `/am/oauth2/authorize` and `/am/oauth2/access_token`,
    where the flows are distinguished by parameters.


    This solution unfortunately comes with significant limitations.
    The SwaggerHub editor has a pretty ugly UI for security. Also, OpenAPI 3
    supports only four OAuth 2.0 flows, whereas AM supports many others.
    For details on supported flows, see
    [OAuth 2.0 Grant Flows](https://backstage.forgerock.com/docs/idcloud-am/latest/oauth2-guide/oauth2-implementing-flows.html).


    This descriptor uses the OpenID Connect Discovery security scheme,
    so that OpenID Provider metadata, including the supported authorization flows,
    could be obtained dynamically.
  version: 1.0.0
paths:
  # FixMe: This path is for tenant admins.
  # For regular users: /am/json/realms/root/realms/alpha/authenticate
  /am/json/authenticate:
    post:
      summary: Get AM SSO cookie
      operationId: getAuthenticate
      description: >
        Authenticate a principal.
      

        The authentication process employs a challenge/response mechanism.
        The process depends on the authentication journey, and can be as
        simple as responding to a challenge for a username and password,
        or much more involved for journeys with multi-factor authentication
        and registration processes.


        Successful authentication results in a `tokenId` AM SSO session cookie.
        Applications can present this cookie for other operations that depend on
        cookie-based authentication. The SSO session cookie name
        is a random string, shown in Tenant Settings > Global Settings > Cookie.


        When authentication depends on the client IP address,
        and your tenant is behind a proxy layer, configure the proxy
        to send the address in an `X-Forwarded-For` header, and
        configure AM to consume and forward the header as necessary.
      tags:
        - AM Requests
      externalDocs:
        description: AM authentication
        url: https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/authn-rest.html
      parameters:
        # FixMe: what authIndexType values do not apply to Identity Cloud?
        - name: authIndexType
          in: query
          description: >
            Type of additional information provided for authentication:

            *   `composite` - Set the value to a composite advice string.

            *   `level` - Set the value to the authentication level.

            *   `module` - Not used.

            *   `resource` - Set the value to a URL protected by an AM policy.

            *   `role` - Set the value to an AM role.

            *   `service` - Set the value to the name of an authentication journey (tree).

            *   `user` - Set the value to an AM user ID.
          schema:
            type: string
            enum:
              - composite
              - level
              - module
              - resource
              - role
              - service
              - user
        - name: authIndexValue
          in: query
          description: A value that corresponds to the `authIndexType`.
          schema:
            type: string
        - name: noSession
          in: query
          description: If `true`, authenticate without requesting a session.
          schema:
            type: boolean
        - name: realm
          in: query
          description: Realm containing the user profile, such as `alpha`.
          schema:
            type: string
        - name: sessionUpgradeSSOTokenID
          in: query
          description: >-
            Set this to a previously issued SSO session cookie value to request session upgrade.
          schema:
            type: string
        - name: X-OpenAM-Username
          in: header
          description: |
            User identifier.

            To use UTF-8 user names, base64-encode the string, and then wrap the string as described in RFC 2047.
          schema:
            type: string
        - name: X-OpenAM-Password
          in: header
          description: |
            User password.

            To use UTF-8 user names, base64-encode the string, and then wrap the string as described in RFC 2047.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
        description: >
          Omit the request body to begin a challenge/response sequence.


          Otherwise, respond to the challenge from the previous request.
      responses:
        '200':
          description: |
            Either a challenge response in ongoing Authentication
            with an `authId` field that uniquely identifies
            the authentication context,
            or a success response with a `tokenId` field
            that holds the new SSO session cookie.


            During ongoing authentication,
            when a challenge response with an `authId` field is received,
            the JSON response serves as the template for the request body
            of the next call to the same endpoint.
            Obtain any missing callback values,
            copy the challenge response object, and populate the missing
            values with the information obtained, before calling the endpoint
            again with the new request object.


            On success, the `tokenId` is received.
            Send it as the value of the SSO session cookie
            in subsequent API calls as proof of authentication.
            The SSO session cookie name is a random string,
            shown in Tenant Settings > Global Settings > Cookie.
          content:
            application/json:
              schema:
                # oneOf:
                # - $ref: '#/components/schemas/Challenge'
                $ref: '#/components/schemas/Token'
              examples:
                challengeResponse:
                  summary: Ongoing authentication
                  value:
                    authId: eyJ0eX...iJ9.eyJvdGsiOiJ...
                    template: ""
                    stage: DataStore1
                    callbacks:
                      - type: NameCallback
                        output:
                          - name: prompt
                            value: User Name
                        input:
                          - name: IDToken1
                            value: ""
                      - type: PasswordCallback
                        output:
                          - name: prompt
                            value: Password
                        input:
                          - name: IDToken2
                            value: ""
                successResponse:
                  summary: Successful authentication
                  value:
                    tokenId: AQIC5w...NTcy*
                    successUrl: /am/ui-admin
                    realm: /alpha
        '401':
          description: Failed authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: HTTP status code (`401`)
                  reason:
                    type: string
                    description: HTTP status reason (`Unauthorized`)
                  message:
                    type: string
                    description: Additional information about the failure
                  failureUrl:
                    type: string
                    description: Location to redirect the user-agent
  /am/json/serverinfo/version#1.0_read:
    get:
      summary: Use AM SSO cookie
      operationId: getServerInfo
      tags:
        - AM Requests
      parameters:
        - in: header
          name: Accept-API-Version
          required: true
          schema:
            type: string
            enum:
              - resource=1.0
      security:
        - iplanetDirectoryProAuth: []
      responses:
        '200':
          description: Success
        '403':
          description: Access denied
  /monitoring/health:
    get:
      summary: No auth required
      operationId: getHealth
      tags:
        - Monitoring
      responses:
        '200':
          description: Health check response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
  /monitoring/logs:
    get:
      summary: Use API keys
      operationId: getLogs
      tags:
        - Logs
        - Monitoring
      parameters:
        - in: query
          name: source
          schema:
            type: string
        - in: query
          name: beginTime
          schema:
            type: string
            format: date-time
        - in: query
          name: endTime
          schema:
            type: string
            format: date-time
        - in: query
          name: _pageSize
          schema:
            type: integer
        - in: query
          name: _pagedResultsCookie
          schema:
            type: string
        - in: query
          name: _prettyPrint
          schema:
            type: boolean
            default: false
        - in: query
          name: _sortKeys
          schema:
            type: string
      security:
        - ApiKeyAuthKey: []
          ApiKeyAuthSecret: []
      responses:
        '200':
          description: List of log events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logResult'
  /monitoring/prometheus/am:
    get:
      summary: Use API keys or HTTP Basic
      operationId: getMonitorPrometheus
      tags:
        - Monitoring
      security:
        - ApiKeyAuthKey: []
          ApiKeyAuthSecret: []
        - BasicAuth: []
      responses:
        '200':
          description: Prometheus metrics for AM pods
  /openidm/managed/alpha_user:
    get:
      summary: Use OAuth 2.0
      operationId: getAlhaUser
      tags:
        - IDM Requests
      parameters:
        - in: query
          name: _queryFilter
          schema:
            type: boolean
            default: true
      security:
        - openIdAlpha: [openid,'fr:idm:*']
      responses:
        '200':
          description: Success
        '403':
          description: Access denied
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/konstantin.lapine/securitySchemesDemo/1.0.0
  - url: https://{tenant}.forgeblocks.com
    variables:
      tenant:
        default: example
        description: The tenant identifier for your deployment
components:
  securitySchemes:
    openIdAlpha:
      type: openIdConnect
      # FixMe: Remove the following comment when the referenced issue is resolved:
      # Due to an open issue reported in https://github.com/swagger-api/swagger-ui/issues/7485,
      # use an absolute URL; for example, https://openam-dx-kl02.forgeblocks.com/am/oauth2/realms/root/realms/alpha/.well-known/openid-configuration
      openIdConnectUrl: https://openam-dx-kl02.forgeblocks.com/am/oauth2/realms/root/realms/alpha/.well-known/openid-configuration
    iplanetDirectoryProAuth:
      type: apiKey
      # FixMe: The description needs a link to /am/json/authenticate:
      description: Use `/am/json/authenticate` to obtain the cookie value.
      in: cookie
      # FixMe: this is variable and depends on the tenant; openam-docs has:
      #name: 46b42b4229cd7a3
      name: iplanetDirectoryPro
    ApiKeyAuthKey:
      type: apiKey
      description: Create an API key/secret pair as admin under Tenant Settings > Global Settings > Log API keys.
      in: header
      name: X-API-KEY
    ApiKeyAuthSecret:
      type: apiKey
      description: Create an API key/secret pair as admin under Tenant Settings > Global Settings > Log API keys.
      in: header
      name: X-API-SECRET
    BasicAuth:
      type: http
      scheme: Basic
  schemas:
    status:
      type: object
      properties:
        status:
          type: string
          example: OK
    logEvent:
      type: object
      properties:
        payload:
          type: object
          example: "10.40.7.28 - - [09/Apr/2020:22:17:40 +0000] GET \"/am/isAlive.jsp HTTP/1.0\" 200 112 0ms"
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          example: text/plain
    logResult:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/logEvent'
        resultCount:
          type: integer
          example: 1
        pagedResultsCookie:
          type: string
          example: 789A6SDF78967FSD89A67689FDAS
        totalPagedResultsPolicy:
          type: string
          example: NONE
        totalPagedResults:
          type: integer
          example: -1
        remainingPagedResults:
          type: integer
          example: -1
    Token:
      type: object
      properties:
        tokenId:
          type: string
          description: SSO session cookie, not returned when `noSession` is set to `true`
        message:
          type: string
          description: Result message
        successUrl:
          type: string
          description: Location to redirect the user-agent
        realm:
          type: string
          description: Realm where authentication succeeded
    Challenge:
      type: object
      properties:
        authId:
          type: string
          description: >
            JSON Web Token (JWT) that uniquely identifies the
            authentication context to AM, and so must also be sent
            back with the requests.
        template:
          type: string
        stage:
          type: string
        callbacks:
          type: object
          items:
            properties:
              type:
                type: string
                description: |
                  The following callbacks request information that usually requires user interaction:

                    *   `BooleanAttributeInputCallback` - Used to ask for a boolean-style confirmation, such as yes/no, or true/false, and retrieve the response. Can be used with IDM policy information to validate the input against the managed user schema.
                    *   `ChoiceCallback` - Used to display a list of choices and retrieve the selected choice by number, counting from 0.
                    *   `ConfirmationCallback` - Used to ask for a confirmation such as Yes, No, or Cancel and retrieve the selection, counting from 0.
                    *   `ConsentMappingCallback` - Used to display managed user attributes that require consent, and to collect consent from the user.
                    *   `DeviceProfileCallback` - Used to request information about the device being used to authenticate. The `identifier` is a unique string to identify the device. The `alias` is friendly name for the device, often derived from the make and model.
                    *   `IdPCallback` - Used to retrieve information required by a client to authenticate with a social identity provider.
                    *   `KbaCreateCallback` - Used to collect knowledge-based authentication (KBA) answers to predefined questions, or to let users register both questions and answers.
                    *   `NameCallback` - Used to retrieve a name string.
                    *   `NumberAttributeInputCallback` - Used to collect numerical-only attributes, such as size, or age.
                    *   `PasswordCallback` - Used to retrieve a password value.
                    *   `SelectIdPCallback` - Used to offer a choice of social identity provider, or local authentication.
                    *   `StringAttributeInputCallback` - Used to collect string attributes, such as city names, telephone numbers, and postcodes.
                    *   `TermsAndConditionsCallback` - Used to show the company’s terms and conditions, and to collect the user’s agreement to them.
                    *   `TextInputCallback` - Used to retrieve text input from the end user.

                  The following read-only callbacks include information to present to (or hide from) a user:

                    *   `HiddenValueCallback` - Used to return form values that are not visually rendered to the end user.
                    *   `MetadataCallback` - Used to inject key-value meta data into the authentication process.
                    *   `PollingWaitCallback` - Used to indicate the amount of time to wait before responding to the callback.
                    *   `RedirectCallback` - Used to redirect the client user-agent.
                    *   `SuspendedTextOutputCallback` - Used to display a message to the end user after the authentication tree is suspended.
                    *   `TextOutputCallback` - Used to display a message to the end user.

                  The following backchannel callbacks require information from the request:

                    *   `HttpCallback` - Used for HTTP handshake negotiations.
                    *   `LanguageCallback` - Used to retrieve the locale for localizing text presented to the end user.
                    *   `ScriptTextOutputCallback` - Used to insert a script into the page presented to the end user. The script can, for example, collect data about the user's environment.
                    *   `X509CertificateCallback` - Used to retrieve the content of an x.509 certificate.
                enum:
                  - BooleanAttributeInputCallback
                  - ChoiceCallback
                  - ConfirmationCallback
                  - ConsentMappingCallback
                  - DeviceProfileCallback
                  - HiddenValueCallback
                  - HttpCallback
                  - IdPCallback
                  - KbaCreateCallback
                  - LanguageCallback
                  - MetadataCallback
                  - NameCallback
                  - NumberAttributeInputCallback
                  - PasswordCallback
                  - PollingWaitCallback
                  - RedirectCallback
                  - ScriptTextOutputCallback
                  - SelectIdPCallback
                  - StringAttributeInputCallback
                  - SuspendedTextOutputCallback
                  - TermsAndConditionsCallback
                  - TextInputCallback
                  - TextOutputCallback
                  - X509CertificateCallback
              output:
                description: >-
                  Name-value pairs to format and display to the user
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: A `prompt` label
                    value:
                      type: string
                      description: A `prompt` value
              input:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of field to populate
                    value:
                      type: string
                      description: Populate this with the user's response